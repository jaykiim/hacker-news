{"id":"src/core/api.ts","dependencies":[{"name":"C:\\Users\\user\\Desktop\\coding\\Projects\\hacker-news-typescript\\ver8\\tsconfig.json","includedInParent":true,"mtime":1640066476554},{"name":"C:\\Users\\user\\Desktop\\coding\\Projects\\hacker-news-typescript\\ver8\\package.json","includedInParent":true,"mtime":1639733771154}],"generated":{"js":"\"use strict\"; // TODO Api 클래스 =======================================================================================\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } Object.defineProperty(subClass, \"prototype\", { value: Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }), writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NewsDetailApi = exports.NewsFeedApi = exports.Api = void 0;\n\nvar Api = /*#__PURE__*/function () {\n  function Api(url) {\n    _classCallCheck(this, Api);\n\n    this.url = url;\n    this.ajax = new XMLHttpRequest();\n  }\n\n  _createClass(Api, [{\n    key: \"getRequest\",\n    value: function getRequest(cb) {\n      /*\r\n        fetch API는 프로미스 객체를 리턴하고,\r\n        그 프로미스 객체가 제공하는 then 메소드에 비동기 함수들을 계속 연결해서 붙여넣으면\r\n        * 기존의 XHR의 문제점이었던, 계속 뎁스가 깊어지는 콜백 헬을 일자로 쭉 펼쳐진 구조로 만들 수 있다.\r\n        * 프로미스도 기본적으로 콜백 구조이긴 하지만 콜백의 뎁스가 여러 깊이로 만들어지지 않고\r\n        * 보기에 일자로 쭉 펼쳐질 수 있는 구조를 제공하는 것이다.\r\n      */\n\n      /*\r\n        또 fetch의 다른 점이 있다면 응답 데이터가 JSON으로 왔을 때 기존 XHR 을 사용할 땐\r\n        * JSON.parse를 써서 직접 바꿔줬지만 그것의 단점은 동기적으로 작동한다는 것이다.\r\n        * 그러니까 JSON의 데이터가 굉장히 크면 다음 코드가 블로킹되는데 fetch가 나오면서 그 문제점도\r\n        * JSON을 비동기적으로 바꾸는 기능(.json()) 을 제공함으로써 해결을 하고 있다.\r\n      */\n      fetch(this.url).then(function (response) {\n        return response.json();\n      }).then(cb).catch(function () {\n        console.error(\"데이터를 불러오는 것에 실패하였습니다.\");\n      });\n    }\n  }]);\n\n  return Api;\n}();\n\nexports.Api = Api;\n\nvar NewsFeedApi = /*#__PURE__*/function (_Api) {\n  _inherits(NewsFeedApi, _Api);\n\n  var _super = _createSuper(NewsFeedApi);\n\n  function NewsFeedApi() {\n    _classCallCheck(this, NewsFeedApi);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(NewsFeedApi, [{\n    key: \"getData\",\n    value: function getData(cb) {\n      this.getRequest(cb);\n    }\n  }]);\n\n  return NewsFeedApi;\n}(Api);\n\nexports.NewsFeedApi = NewsFeedApi;\n\nvar NewsDetailApi = /*#__PURE__*/function (_Api2) {\n  _inherits(NewsDetailApi, _Api2);\n\n  var _super2 = _createSuper(NewsDetailApi);\n\n  function NewsDetailApi() {\n    _classCallCheck(this, NewsDetailApi);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(NewsDetailApi, [{\n    key: \"getData\",\n    value: function getData(cb) {\n      this.getRequest(cb);\n    }\n  }]);\n\n  return NewsDetailApi;\n}(Api);\n\nexports.NewsDetailApi = NewsDetailApi;"},"sourceMaps":{"js":{"mappings":[{"source":"src/core/api.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":14}},{"source":"src/core/api.ts","name":null,"original":{"line":5,"column":13},"generated":{"line":30,"column":4}},{"source":"src/core/api.ts","name":null,"original":{"line":9,"column":2},"generated":{"line":31,"column":0}},{"source":"src/core/api.ts","name":null,"original":{"line":9,"column":14},"generated":{"line":31,"column":15}},{"source":"src/core/api.ts","name":null,"original":{"line":9,"column":2},"generated":{"line":31,"column":18}},{"source":"src/core/api.ts","name":null,"original":{"line":9,"column":25},"generated":{"line":31,"column":20}},{"source":"src/core/api.ts","name":null,"original":{"line":9,"column":25},"generated":{"line":32,"column":0}},{"source":"src/core/api.ts","name":null,"original":{"line":10,"column":4},"generated":{"line":34,"column":0}},{"source":"src/core/api.ts","name":null,"original":{"line":10,"column":9},"generated":{"line":34,"column":9}},{"source":"src/core/api.ts","name":null,"original":{"line":10,"column":4},"generated":{"line":34,"column":12}},{"source":"src/core/api.ts","name":null,"original":{"line":10,"column":15},"generated":{"line":34,"column":15}},{"source":"src/core/api.ts","name":null,"original":{"line":10,"column":4},"generated":{"line":34,"column":18}},{"source":"src/core/api.ts","name":null,"original":{"line":11,"column":4},"generated":{"line":35,"column":0}},{"source":"src/core/api.ts","name":null,"original":{"line":11,"column":9},"generated":{"line":35,"column":9}},{"source":"src/core/api.ts","name":null,"original":{"line":11,"column":4},"generated":{"line":35,"column":13}},{"source":"src/core/api.ts","name":null,"original":{"line":11,"column":16},"generated":{"line":35,"column":16}},{"source":"src/core/api.ts","name":null,"original":{"line":11,"column":20},"generated":{"line":35,"column":20}},{"source":"src/core/api.ts","name":null,"original":{"line":11,"column":16},"generated":{"line":35,"column":34}},{"source":"src/core/api.ts","name":null,"original":{"line":11,"column":4},"generated":{"line":35,"column":36}},{"source":"src/core/api.ts","name":null,"original":{"line":12,"column":3},"generated":{"line":36,"column":0}},{"source":"src/core/api.ts","name":null,"original":{"line":14,"column":12},"generated":{"line":40,"column":11}},{"source":"src/core/api.ts","name":null,"original":{"line":14,"column":37},"generated":{"line":40,"column":31}},{"source":"src/core/api.ts","name":null,"original":{"line":14,"column":12},"generated":{"line":40,"column":33}},{"source":"src/core/api.ts","name":null,"original":{"line":14,"column":69},"generated":{"line":40,"column":35}},{"source":"src/core/api.ts","name":null,"original":{"line":15,"column":4},"generated":{"line":41,"column":0}},{"source":"src/core/api.ts","name":null,"original":{"line":23,"column":4},"generated":{"line":49,"column":0}},{"source":"src/core/api.ts","name":null,"original":{"line":30,"column":4},"generated":{"line":55,"column":0}},{"source":"src/core/api.ts","name":null,"original":{"line":30,"column":4},"generated":{"line":55,"column":6}},{"source":"src/core/api.ts","name":null,"original":{"line":30,"column":9},"generated":{"line":55,"column":11}},{"source":"src/core/api.ts","name":null,"original":{"line":30,"column":10},"generated":{"line":55,"column":12}},{"source":"src/core/api.ts","name":null,"original":{"line":30,"column":15},"generated":{"line":55,"column":17}},{"source":"src/core/api.ts","name":null,"original":{"line":30,"column":9},"generated":{"line":55,"column":20}},{"source":"src/core/api.ts","name":null,"original":{"line":30,"column":4},"generated":{"line":55,"column":21}},{"source":"src/core/api.ts","name":null,"original":{"line":31,"column":7},"generated":{"line":55,"column":22}},{"source":"src/core/api.ts","name":null,"original":{"line":30,"column":4},"generated":{"line":55,"column":26}},{"source":"src/core/api.ts","name":null,"original":{"line":31,"column":12},"generated":{"line":55,"column":27}},{"source":"src/core/api.ts","name":null,"original":{"line":31,"column":13},"generated":{"line":55,"column":37}},{"source":"src/core/api.ts","name":null,"original":{"line":31,"column":12},"generated":{"line":55,"column":45}},{"source":"src/core/api.ts","name":null,"original":{"line":31,"column":12},"generated":{"line":56,"column":0}},{"source":"src/core/api.ts","name":null,"original":{"line":31,"column":26},"generated":{"line":56,"column":15}},{"source":"src/core/api.ts","name":null,"original":{"line":31,"column":34},"generated":{"line":56,"column":23}},{"source":"src/core/api.ts","name":null,"original":{"line":31,"column":35},"generated":{"line":56,"column":24}},{"source":"src/core/api.ts","name":null,"original":{"line":31,"column":26},"generated":{"line":56,"column":28}},{"source":"src/core/api.ts","name":null,"original":{"line":31,"column":12},"generated":{"line":56,"column":30}},{"source":"src/core/api.ts","name":null,"original":{"line":31,"column":12},"generated":{"line":57,"column":0}},{"source":"src/core/api.ts","name":null,"original":{"line":30,"column":4},"generated":{"line":57,"column":7}},{"source":"src/core/api.ts","name":null,"original":{"line":32,"column":7},"generated":{"line":57,"column":9}},{"source":"src/core/api.ts","name":null,"original":{"line":30,"column":4},"generated":{"line":57,"column":13}},{"source":"src/core/api.ts","name":null,"original":{"line":32,"column":12},"generated":{"line":57,"column":14}},{"source":"src/core/api.ts","name":null,"original":{"line":30,"column":4},"generated":{"line":57,"column":16}},{"source":"src/core/api.ts","name":null,"original":{"line":33,"column":7},"generated":{"line":57,"column":18}},{"source":"src/core/api.ts","name":null,"original":{"line":30,"column":4},"generated":{"line":57,"column":23}},{"source":"src/core/api.ts","name":null,"original":{"line":33,"column":13},"generated":{"line":57,"column":24}},{"source":"src/core/api.ts","name":null,"original":{"line":33,"column":18},"generated":{"line":57,"column":36}},{"source":"src/core/api.ts","name":null,"original":{"line":34,"column":8},"generated":{"line":58,"column":0}},{"source":"src/core/api.ts","name":null,"original":{"line":34,"column":8},"generated":{"line":58,"column":8}},{"source":"src/core/api.ts","name":null,"original":{"line":34,"column":15},"generated":{"line":58,"column":15}},{"source":"src/core/api.ts","name":null,"original":{"line":34,"column":16},"generated":{"line":58,"column":16}},{"source":"src/core/api.ts","name":null,"original":{"line":34,"column":8},"generated":{"line":58,"column":21}},{"source":"src/core/api.ts","name":null,"original":{"line":34,"column":22},"generated":{"line":58,"column":22}},{"source":"src/core/api.ts","name":null,"original":{"line":34,"column":8},"generated":{"line":58,"column":45}},{"source":"src/core/api.ts","name":null,"original":{"line":35,"column":7},"generated":{"line":59,"column":0}},{"source":"src/core/api.ts","name":null,"original":{"line":30,"column":4},"generated":{"line":59,"column":7}},{"source":"src/core/api.ts","name":null,"original":{"line":36,"column":3},"generated":{"line":60,"column":0}},{"source":"src/core/api.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":66,"column":0}},{"source":"src/core/api.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":66,"column":7}},{"source":"src/core/api.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":66,"column":8}},{"source":"src/core/api.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":66,"column":11}},{"source":"src/core/api.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":66,"column":14}},{"source":"src/core/api.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":66,"column":17}},{"source":"src/core/api.ts","name":null,"original":{"line":39,"column":13},"generated":{"line":68,"column":4}},{"source":"src/core/api.ts","name":null,"original":{"line":40,"column":2},"generated":{"line":81,"column":11}},{"source":"src/core/api.ts","name":null,"original":{"line":40,"column":10},"generated":{"line":81,"column":28}},{"source":"src/core/api.ts","name":null,"original":{"line":40,"column":2},"generated":{"line":81,"column":30}},{"source":"src/core/api.ts","name":null,"original":{"line":40,"column":40},"generated":{"line":81,"column":32}},{"source":"src/core/api.ts","name":null,"original":{"line":41,"column":4},"generated":{"line":82,"column":0}},{"source":"src/core/api.ts","name":null,"original":{"line":41,"column":9},"generated":{"line":82,"column":11}},{"source":"src/core/api.ts","name":null,"original":{"line":41,"column":4},"generated":{"line":82,"column":21}},{"source":"src/core/api.ts","name":null,"original":{"line":41,"column":32},"generated":{"line":82,"column":22}},{"source":"src/core/api.ts","name":null,"original":{"line":41,"column":4},"generated":{"line":82,"column":24}},{"source":"src/core/api.ts","name":null,"original":{"line":42,"column":3},"generated":{"line":83,"column":0}},{"source":"src/core/api.ts","name":null,"original":{"line":39,"column":33},"generated":{"line":87,"column":2}},{"source":"src/core/api.ts","name":null,"original":{"line":39,"column":0},"generated":{"line":89,"column":0}},{"source":"src/core/api.ts","name":null,"original":{"line":39,"column":0},"generated":{"line":89,"column":7}},{"source":"src/core/api.ts","name":null,"original":{"line":39,"column":0},"generated":{"line":89,"column":8}},{"source":"src/core/api.ts","name":null,"original":{"line":39,"column":0},"generated":{"line":89,"column":19}},{"source":"src/core/api.ts","name":null,"original":{"line":39,"column":0},"generated":{"line":89,"column":22}},{"source":"src/core/api.ts","name":null,"original":{"line":39,"column":0},"generated":{"line":89,"column":33}},{"source":"src/core/api.ts","name":null,"original":{"line":45,"column":13},"generated":{"line":91,"column":4}},{"source":"src/core/api.ts","name":null,"original":{"line":46,"column":2},"generated":{"line":104,"column":11}},{"source":"src/core/api.ts","name":null,"original":{"line":46,"column":10},"generated":{"line":104,"column":28}},{"source":"src/core/api.ts","name":null,"original":{"line":46,"column":2},"generated":{"line":104,"column":30}},{"source":"src/core/api.ts","name":null,"original":{"line":46,"column":40},"generated":{"line":104,"column":32}},{"source":"src/core/api.ts","name":null,"original":{"line":47,"column":4},"generated":{"line":105,"column":0}},{"source":"src/core/api.ts","name":null,"original":{"line":47,"column":9},"generated":{"line":105,"column":11}},{"source":"src/core/api.ts","name":null,"original":{"line":47,"column":4},"generated":{"line":105,"column":21}},{"source":"src/core/api.ts","name":null,"original":{"line":47,"column":32},"generated":{"line":105,"column":22}},{"source":"src/core/api.ts","name":null,"original":{"line":47,"column":4},"generated":{"line":105,"column":24}},{"source":"src/core/api.ts","name":null,"original":{"line":48,"column":3},"generated":{"line":106,"column":0}},{"source":"src/core/api.ts","name":null,"original":{"line":45,"column":35},"generated":{"line":110,"column":2}},{"source":"src/core/api.ts","name":null,"original":{"line":45,"column":0},"generated":{"line":112,"column":0}},{"source":"src/core/api.ts","name":null,"original":{"line":45,"column":0},"generated":{"line":112,"column":7}},{"source":"src/core/api.ts","name":null,"original":{"line":45,"column":0},"generated":{"line":112,"column":8}},{"source":"src/core/api.ts","name":null,"original":{"line":45,"column":0},"generated":{"line":112,"column":21}},{"source":"src/core/api.ts","name":null,"original":{"line":45,"column":0},"generated":{"line":112,"column":24}},{"source":"src/core/api.ts","name":null,"original":{"line":45,"column":0},"generated":{"line":112,"column":37}}],"sources":{"src/core/api.ts":"// TODO Api 클래스 =======================================================================================\r\n\r\nimport { NewsFeed, NewsDetail } from \"../types\";\r\n\r\nexport class Api {\r\n  url: string;\r\n  ajax: XMLHttpRequest;\r\n\r\n  constructor(url: string) {\r\n    this.url = url;\r\n    this.ajax = new XMLHttpRequest();\r\n  }\r\n\r\n  protected getRequest<AjaxResponse>(cb: (data: AjaxResponse) => void): void {\r\n    /*\r\n      fetch API는 프로미스 객체를 리턴하고, \r\n      그 프로미스 객체가 제공하는 then 메소드에 비동기 함수들을 계속 연결해서 붙여넣으면 \r\n      * 기존의 XHR의 문제점이었던, 계속 뎁스가 깊어지는 콜백 헬을 일자로 쭉 펼쳐진 구조로 만들 수 있다. \r\n      * 프로미스도 기본적으로 콜백 구조이긴 하지만 콜백의 뎁스가 여러 깊이로 만들어지지 않고 \r\n      * 보기에 일자로 쭉 펼쳐질 수 있는 구조를 제공하는 것이다. \r\n    */\r\n\r\n    /*\r\n      또 fetch의 다른 점이 있다면 응답 데이터가 JSON으로 왔을 때 기존 XHR 을 사용할 땐 \r\n      * JSON.parse를 써서 직접 바꿔줬지만 그것의 단점은 동기적으로 작동한다는 것이다. \r\n      * 그러니까 JSON의 데이터가 굉장히 크면 다음 코드가 블로킹되는데 fetch가 나오면서 그 문제점도 \r\n      * JSON을 비동기적으로 바꾸는 기능(.json()) 을 제공함으로써 해결을 하고 있다.  \r\n    */\r\n\r\n    fetch(this.url)\r\n      .then((response) => response.json())\r\n      .then(cb)\r\n      .catch(() => {\r\n        console.error(\"데이터를 불러오는 것에 실패하였습니다.\");\r\n      });\r\n  }\r\n}\r\n\r\nexport class NewsFeedApi extends Api {\r\n  getData(cb: (data: NewsFeed[]) => void): void {\r\n    this.getRequest<NewsFeed[]>(cb);\r\n  }\r\n}\r\n\r\nexport class NewsDetailApi extends Api {\r\n  getData(cb: (data: NewsDetail) => void): void {\r\n    this.getRequest<NewsDetail>(cb);\r\n  }\r\n}\r\n"},"lineCount":null}},"error":null,"hash":"271f166e593d941c64f5015ab92a625a","cacheData":{"env":{}}}